library(dplyr)
# NYC 2015 CENSUS EXAMPLE
# EXPLORATORY DATA ANALYSIS
# ATTACH PACKAGES
library(tidyr) # for cleaning data
library(dplyr) # for transforming data
library(ggplot2) # for plotting data
library(ggmap) # for creating maps w/Google Maps
library(ggsci)
# LOAD DATA
nyc <- read.csv ("nyc_census.csv", header=TRUE)
nyc_census <- na.omit(nyc) # at this point you can also drop columns that you don't need
setwd("~/Documents/Teaching/Visualization Technologies/week 2/nyc census example")
# NYC 2015 CENSUS EXAMPLE
# EXPLORATORY DATA ANALYSIS
# ATTACH PACKAGES
library(tidyr) # for cleaning data
library(dplyr) # for transforming data
library(ggplot2) # for plotting data
library(ggmap) # for creating maps w/Google Maps
library(ggsci)
# LOAD DATA
nyc <- read.csv ("nyc_census.csv", header=TRUE)
loc <- read.csv ("census_tract_loc.csv", header=TRUE)
summary(nyc) # compute simple statistics
# REMOVE SCIENTIFIC NOTATION
options(scipen = 999)
# CLEAN DATA / DROP NA
dim(nyc)  # 2095 35
nyc_census <- na.omit(nyc) # at this point you can also drop columns that you don't need
# SUMMARY STATISTICS
dim(nyc_census)  # 2095 35
summary(nyc_census)
par(mfrow = c(1,1)) # Create
boxplot(Income~County,data = nyc_census,
main="Boxplot of Income in Different Counties",
xlab="County",ylab="Income")
par(mfrow = c(2,1))
boxplot(nyc_census$Men~nyc_census$County)
boxplot(nyc_census$Women~nyc_census$County)
par(mfrow = c(2,1))
boxplot(nyc_census$Hispanic~nyc_census$County,ylab="Hispanic")
boxplot(nyc_census$White~nyc_census$County,ylab="White")
boxplot(nyc_census$Black~nyc_census$County,ylab="Black")
boxplot(nyc_census$Asian~nyc_census$County,ylab="Asian")
boxplot(nyc_census$Native~nyc_census$County,ylab="Native")
par(mfrow = c(2,1))
boxplot(nyc_census$Income~nyc_census$County,ylab="Income")
boxplot(nyc_census$Poverty~nyc_census$County,ylab="Poverty")
par(mfrow = c(1,1))
boxplot(nyc_census$Professional~nyc_census$County,ylab="Professional")
boxplot(nyc_census$Service~nyc_census$County,ylab="Service")
boxplot(nyc_census$Office~nyc_census$County,ylab="Office")
boxplot(nyc_census$Construction~nyc_census$County,ylab="Construction")
boxplot(nyc_census$Production~nyc_census$County,ylab="Production")
par(mfrow = c(2,1))
boxplot(nyc_census$Drive~nyc_census$County,ylab="Drive")
boxplot(nyc_census$Transit~nyc_census$County,ylab="Transit")
boxplot(nyc_census$Carpool~nyc_census$County,ylab="Carpool")
boxplot(nyc_census$Walk~nyc_census$County,ylab="Walk")
library(gridExtra)
library(ggthemes)
# barchart
ggplot(nyc_census,aes(x = Borough, y = Women)) + geom_bar(stat = "Identity", fill="black")
View(nyc_census)
# library
library(ggplot2)
# create a dataset
specie <- c(rep("sorgho" , 3) , rep("poacee" , 3) , rep("banana" , 3) , rep("triticum" , 3) )
condition <- rep(c("normal" , "stress" , "Nitrogen") , 4)
value <- abs(rnorm(12 , 0 , 15))
data <- data.frame(specie,condition,value)
# Grouped
ggplot(data, aes(fill=condition, y=value, x=specie)) +
geom_bar(position="dodge", stat="identity")
# library
library(ggplot2)
# create a dataset
specie <- c(rep("sorgho" , 3) , rep("poacee" , 3) , rep("banana" , 3) , rep("triticum" , 3) )
condition <- rep(c("normal" , "stress" , "Nitrogen") , 4)
value <- abs(rnorm(12 , 0 , 15))
data <- data.frame(specie,condition,value)
# Grouped
ggplot(data, aes(fill=condition, y=value, x=specie)) +
geom_bar(position="dodge", stat="identity")
# library
library(ggplot2)
# create a dataset
specie <- c(rep("sorgho" , 3) , rep("poacee" , 3) , rep("banana" , 3) , rep("triticum" , 3) )
condition <- rep(c("normal" , "stress" , "Nitrogen") , 4)
value <- abs(rnorm(12 , 0 , 15))
data <- data.frame(specie,condition,value)
# Grouped
ggplot(data, aes(fill=condition, y=value, x=specie)) +
geom_bar(position="dodge", stat="identity")
library(ggplot2)
library(viridis)
library(hrbrthemes)
# create a dataset
specie <- c(rep("sorgho" , 3) , rep("poacee" , 3) , rep("banana" , 3) , rep("triticum" , 3) )
condition <- rep(c("normal" , "stress" , "Nitrogen") , 4)
value <- abs(rnorm(12 , 0 , 15))
data <- data.frame(specie,condition,value)
# NYC 2015 CENSUS EXAMPLE
# EXPLORATORY DATA ANALYSIS
# ATTACH PACKAGES
library(tidyr) # for cleaning data
# library
library(ggplot2)
# create a dataset
specie <- c(rep("sorgho" , 3) , rep("poacee" , 3) , rep("banana" , 3) , rep("triticum" , 3) )
condition <- rep(c("normal" , "stress" , "Nitrogen") , 4)
value <- abs(rnorm(12 , 0 , 15))
data <- data.table(specie,condition,value)
# Grouped
ggplot(data, aes(fill=condition, y=value, x=specie)) +
geom_bar(position="dodge", stat="identity")
View(data)
# library
library(ggplot2)
# create a dataset
specie <- c(rep("sorgho" , 3) , rep("poacee" , 3) , rep("banana" , 3) , rep("triticum" , 3) )
condition <- rep(c("normal" , "stress" , "Nitrogen") , 4)
value <- abs(rnorm(12 , 0 , 15))
data <- data.table(specie,condition,value)
# Grouped
ggplot(data, aes(fill=condition, y=value, x=specie)) +
geom_bar(position="dodge", stat="identity")
rm(list = ls())
# library
library(ggplot2)
# create a dataset
specie <- c(rep("sorgho" , 3) , rep("poacee" , 3) , rep("banana" , 3) , rep("triticum" , 3) )
condition <- rep(c("normal" , "stress" , "Nitrogen") , 4)
value <- abs(rnorm(12 , 0 , 15))
data <- data.table(specie,condition,value)
# Grouped
ggplot(data, aes(fill=condition, y=value, x=specie)) +
geom_bar(position="dodge", stat="identity")
# library
library(ggplot2)
# create a dataset
specie <- c(rep("sorgho" , 3) , rep("poacee" , 3) , rep("banana" , 3) , rep("triticum" , 3) )
condition <- rep(c("normal" , "stress" , "Nitrogen") , 4)
value <- abs(rnorm(12 , 0 , 15))
data <- data.table(specie,condition,value)
# Grouped
ggplot(data, aes(fill=condition, y=value, x=specie)) +
geom_bar(position="dodge", stat="identity")
setwd("~/Documents/Teaching/Visualization Technologies/week 2/nyc census example")
# library
library(tidyr) # for cleaning data
library(dplyr) # for transforming data
library(ggplot2) # for plotting data
library(ggmap) # for creating maps w/Google Maps
library(ggsci)
# create a dataset
nyc <- read.csv ("canopystreettree_supp_boro.csv", header=TRUE)
View(nyc)
View(nyc)
new_df <- select(nyc,boroname,canopy2010percent,canopy2017percent)
View(new_df)
# library
library(tidyr) # for cleaning data
library(dplyr) # for transforming data
library(ggplot2) # for plotting data
library(ggmap) # for creating maps w/Google Maps
library(ggsci)
# create a dataset
nyc <- read.csv ("canopystreettree_supp_boro.csv", header=TRUE)
new_df <- select(nyc,boroname,canopy2010percent,canopy2017percent)
long <- wide %>% gather(year, value, -c(boroname))
# library
library(tidyr) # for cleaning data
library(dplyr) # for transforming data
library(ggplot2) # for plotting data
library(ggmap) # for creating maps w/Google Maps
library(ggsci)
# create a dataset
nyc <- read.csv ("canopystreettree_supp_boro.csv", header=TRUE)
new_df <- select(nyc,boroname,canopy2010percent,canopy2017percent)
long <- wide %>% gather(year, value, -c(boroname))
# create a dataset
nyc <- read.csv ("canopystreettree_supp_boro.csv", header=TRUE)
new_df <- select(nyc,boroname,canopy2010percent,canopy2017percent)
wide %>% gather(year, value, -c(boroname))
long <- new_df %>% gather(year, value, -c(boroname))
View(long)
# library
library(tidyr) # for cleaning data
library(dplyr) # for transforming data
library(ggplot2) # for plotting data
library(ggmap) # for creating maps w/Google Maps
library(ggsci)
# create a dataset
nyc <- read.csv ("canopystreettree_supp_boro.csv", header=TRUE)
new_df <- select(nyc,boroname,canopy2010percent,canopy2017percent)
long <- new_df %>% gather(year, value, -c(boroname))
View(long)
long <- new_df %>% gather(year, value, -c(boroname))
# library
library(tidyr) # for cleaning data
library(dplyr) # for transforming data
library(ggplot2) # for plotting data
library(ggmap) # for creating maps w/Google Maps
library(ggsci)
library(gridExtra)
library(ggthemes)
# create a dataset
nyc <- read.csv ("canopystreettree_supp_boro.csv", header=TRUE)
long <- new_df %>% gather(year, value, -c(boroname))
# Grouped
ggplot(long, aes(x=boroname, y=value, group=year, fill=year)) +
geom_bar(position="dodge", stat="identity")+theme_classic()
# Grouped
ggplot(long, aes(x=boroname, y=value, group=year, fill=year)) +
geom_bar(position="dodge", stat="identity")+scale_y_continuous(expand=c(0,0))+theme_classic()
